{"version":3,"sources":["IconPreview.js","KoFi.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["opentype","require","FONTS","preferredFamily","fontFamily","path","baseClass","IconPreview","props","canvas","React","createRef","state","icon","color","size","margin","transparentBg","bgColor","icons","fontsLoaded","loadFonts","bind","drawCanvasContent","downloadIcon","handleIconChange","handleInputChange","handleTransparentBgToggle","fontsLoadPromises","font","load","document","fonts","push","Promise","all","then","_","prevProps","prevState","this","loadFont","tempIcons","names","en","fontPreferred","glyph","glyphs","hasOwnProperty","element","find","unicode","key","index","value","name","label","defaultIcon","sort","a","b","setState","url","resolve","reject","err","toString","length","toUpperCase","substr","curCanvas","isDownloadCanvas","current","createElement","dpr","window","devicePixelRatio","canvasSize","getElementById","getBoundingClientRect","width","ctx","getContext","canvasWidth","canvasHeight","marginMultiplier","sizeToMatch","height","clearRect","patternCanvas","patternContext","fillStyle","fillRect","pattern","createPattern","textString","String","fromCharCode","parseInt","formatUnicode","measure","measureText","textBaseline","fillText","scale","style","e","preventDefault","cleanColor","replace","downloadFileName","link","download","href","toDataURL","click","URL","revokeObjectURL","target","innerProps","onMouseMove","onMouseOver","data","otherProps","isFocused","newProps","Option","className","children","Grid","columns","stackable","Column","Segment","textAlign","Form","onSubmit","loading","Field","filterOption","createFilter","ignoreAccents","onChange","options","components","customOptionComponent","id","Input","type","min","max","step","Label","Checkbox","checked","inline","Button","ref","Component","KoFi","class","title","backgroundColor","rel","src","alt","worlds","Footer","worldIndex","spinTheGlobe","spinTheGlobeTimer","setInterval","clearInterval","role","aria-label","App","Container","Menu","pointing","secondary","Item","header","Header","as","position","Boolean","location","hostname","match","instance","createInstance","urlBase","siteId","ReactDOM","render","env","process","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6a511cf9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './IconPreview.css';\nimport Select, { createFilter, components } from 'react-select';\nimport { Grid, Segment, Form, Button, Checkbox, Input, Label } from 'semantic-ui-react';\n\nconst opentype = require('opentype.js');\n\nconst MAX_CANVAS_SIZE = 1024;\nconst FONTS = [\n  {\n    preferredFamily: \"Font Awesome 5 Free\",\n    fontFamily: \"Font Awesome 5 Free Solid\",\n    path: \"fonts/fa-solid-900.ttf\",\n    baseClass: \"fas\"\n  },\n  {\n    preferredFamily: \"Font Awesome 5 Brands\",\n    fontFamily: \"Font Awesome 5 Brands Regular\",\n    path: \"fonts/fa-brands-400.ttf\",\n    baseClass: \"fab\"\n  }\n];\n\nclass IconPreview extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.canvas = React.createRef();\n\n    this.state = {\n      icon: { },\n      color: \"#ff0078\",\n      size: 512,\n      margin: 20,\n      transparentBg: true,\n      bgColor: \"#ffffff\",\n      icons: [],\n      fontsLoaded: false\n    };\n\n    this.loadFonts = this.loadFonts.bind(this);\n    this.drawCanvasContent = this.drawCanvasContent.bind(this);\n    this.downloadIcon = this.downloadIcon.bind(this);\n    this.handleIconChange = this.handleIconChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleTransparentBgToggle = this.handleTransparentBgToggle.bind(this);\n  }\n\n  componentDidMount() {\n    const fontsLoadPromises = [];\n    for (let font of FONTS) {\n      const load = document.fonts.load(`900 48px \"${font.preferredFamily}\"`);\n      fontsLoadPromises.push(load);\n    }\n\n    // Load up both fonts before we start to render the canvas\n    const loadFonts = Promise.all(fontsLoadPromises);\n    loadFonts.then((_) => {\n      this.loadFonts();\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.size === this.state.size) {\n      this.drawCanvasContent();\n    }\n  }\n\n  async loadFonts() {\n    const fonts = [];\n    for (let font of FONTS) {\n      const load = await this.loadFont(font.path);\n      fonts.push(load);\n    }\n\n    let tempIcons = [], defaultIcon;\n\n    for (let font of fonts) {\n      const fontFamily = font.names.fontFamily.en;\n      const fontPreferred = font.names.preferredFamily.en;\n\n      for (const glyph in font.glyphs.glyphs) {\n        if (font.glyphs.glyphs.hasOwnProperty(glyph)) {\n          const element = font.glyphs.glyphs[glyph];\n          const baseClass = FONTS.find(font => font.fontFamily === fontFamily).baseClass;\n\n          if (element.unicode) {\n            // We're looking at a 'real' icon\n            const icon = {\n              ...element,\n              key: element.index,\n              value: element.name,\n              label: element.name,\n              fontFamily: fontPreferred,\n              baseClass\n            }\n            tempIcons.push(icon);\n\n            // Set our default 'font-awesome' glyph\n            if (element.name === \"font-awesome\") {\n              defaultIcon = icon;\n            }\n          } \n        }\n      }\n    }\n\n    tempIcons.sort((a, b) => a.value > b.value);\n\n    this.setState({\n      icons: tempIcons,\n      fontsLoaded: true,\n      icon: defaultIcon\n    });\n\n    this.drawCanvasContent();\n  }\n\n  // Fix for opentype async/await, https://github.com/opentypejs/opentype.js/issues/406\n  async loadFont(url) {\n    return await new Promise(\n      (resolve, reject) => opentype.load(\n        url, (err, font) => err ? reject(err) : resolve(font)\n      )\n    )\n  }\n\n  formatUnicode(unicode) {\n    unicode = unicode.toString(16);\n    if (unicode.length > 4) {\n        return (\"000000\" + unicode.toUpperCase()).substr(-6)\n    } else {\n        return (\"0000\" + unicode.toUpperCase()).substr(-4)\n    }\n  }\n\n  drawCanvasContent(isDownloadCanvas = false) {\n    let curCanvas;\n    if (!isDownloadCanvas && this.canvas.current) {\n      curCanvas = this.canvas.current;\n    } else if (isDownloadCanvas) {\n      curCanvas = document.createElement('canvas');\n    }\n\n    const { icon, size, margin, color, transparentBg, bgColor } = this.state;\n    const dpr = window.devicePixelRatio;\n    let canvasSize = document.getElementById(\"canvas-wrap\").getBoundingClientRect().width * dpr;\n    canvasSize = (canvasSize > MAX_CANVAS_SIZE) ? MAX_CANVAS_SIZE : canvasSize;\n\n    if (curCanvas) {\n      const ctx = curCanvas.getContext(\"2d\");\n      const canvasWidth = (isDownloadCanvas) ? size : canvasSize;\n      const canvasHeight = canvasWidth;\n      const marginMultiplier = (isDownloadCanvas) ? 1 : dpr;\n      const sizeToMatch = canvasWidth - (margin * marginMultiplier * 2);\n      curCanvas.width = curCanvas.height = canvasWidth;\n\n      // Clear canvas first\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n      // Background\n      if (!transparentBg) {\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n      } else if (!isDownloadCanvas) {\n        // Create transparent 'checkered' background, only if it's the display canvas\n        const patternCanvas = document.createElement('canvas');\n        const patternContext = patternCanvas.getContext('2d');\n        patternCanvas.width = 40;\n        patternCanvas.height = 40;\n        patternContext.fillStyle = \"#d5d5d5\";\n        patternContext.fillRect(0,0,20,20);\n        patternContext.fillRect(20,20,20,20);\n        const pattern = ctx.createPattern(patternCanvas, \"repeat\");\n        ctx.fillStyle = pattern;\n        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      const textString = String.fromCharCode(parseInt(this.formatUnicode(icon.unicode), 16));\n\n      const font = `900 ${sizeToMatch}px \"${icon.fontFamily}\"`;\n      ctx.font = font;\n      const measure = ctx.measureText(textString);\n\n      ctx.fillStyle = color;\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(textString, (canvasWidth/2) - (measure.width / 2), canvasHeight / 2);\n\n      ctx.scale = dpr;\n      curCanvas.style.width = `${canvasWidth / dpr}px`;\n      curCanvas.style.height = `${canvasHeight / dpr}px`;\n\n      // The returned canvas object will only be used by the downloadIcon method, otherwise ignored\n      return curCanvas;\n    }\n  }\n\n  downloadIcon(e) {\n    e.preventDefault();\n\n    const canvas = this.drawCanvasContent(true);\n    const { icon, size, color } = this.state;\n    const cleanColor = color.replace('#', '');\n    const downloadFileName = `CleanIcons_${icon.label}_${size}px_${cleanColor}.png`;\n\n    let link = document.createElement('a');\n    link.download = downloadFileName;\n\n    link.href = canvas.toDataURL(\"image/png\")\n    link.click((e) => {\n      e.preventDefault();\n    });\n\n    // Delete the internal blob reference, to let the browser clear memory from it\n    URL.revokeObjectURL(link.href);\n  }\n\n  handleIconChange(icon) {\n    this.setState({\n      icon\n    });\n  }\n\n  handleInputChange(e) {\n    const target = e.target;\n    const { value, name } = target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleTransparentBgToggle() {\n    this.setState(prevState => ({\n      transparentBg: !prevState.transparentBg\n    }));\n  }\n\n  customOptionComponent(props) {\n    delete props.innerProps.onMouseMove;\n    delete props.innerProps.onMouseOver;\n    const {data, innerProps, isFocused, ...otherProps} = props;\n    const newProps = {innerProps: {...innerProps}, ...otherProps};\n    return (\n      <components.Option {...newProps} className=\"select-option\">\n        {props.children}\n        {data.label && <span className=\"icon-wrap\"><span className={`${data.baseClass} fa-${data.label}`} /></span>}\n      </components.Option>\n    );\n  }\n\n  render() {\n    const { fontsLoaded, icons, icon, size, margin, color, transparentBg, bgColor } = this.state;\n\n    return (\n      <Grid columns={2} stackable>\n        <Grid.Column>\n          <Segment\n            textAlign=\"left\"\n          >\n            <Form name=\"adjust-form\" onSubmit={this.downloadIcon} size=\"large\" loading={!fontsLoaded}>\n              <Form.Field>\n                <label>\n                  Icon:\n                  <Select\n                    loading={fontsLoaded}\n                    filterOption={createFilter({ ignoreAccents: false })}\n                    onChange={this.handleIconChange}\n                    options={icons}\n                    value={icon}\n                    components={ {Option: this.customOptionComponent } }\n                  />\n                </label>\n              </Form.Field>\n              <Form.Field>\n                <label>\n                  Margin: <span id=\"icon-margin\">{margin}px</span>\n                  <Input type=\"range\" min=\"-20\" max=\"100\" step=\"1\" value={margin} name=\"margin\" onChange={this.handleInputChange} />\n                </label>\n              </Form.Field>\n              <Form.Field>\n                  <Input label=\"Color:\" type=\"text\" className=\"color-input\" value={color} name=\"color\" onChange={this.handleInputChange}>\n                    <Label color=\"teal\">Color:</Label>\n                    <input type=\"text\" name=\"color\" value={color} />\n                    <input type=\"color\" name=\"color\" value={color} />\n                  </Input>\n              </Form.Field>\n              <Form.Field>\n                  <Checkbox checked={transparentBg} className=\"transparent-bg-input\" onChange={this.handleTransparentBgToggle} label=\"Transparent Background\" />\n                  {!transparentBg &&\n                    <Input label=\"Background Color:\" type=\"text\" className=\"color-input\" value={bgColor} name=\"bgColor\" onChange={this.handleInputChange}>\n                      <Label color=\"teal\">Background Color:</Label>\n                      <input type=\"text\" value={bgColor} />\n                      <input type=\"color\" value={bgColor} />\n                    </Input>\n                  }\n              </Form.Field>\n              <Form.Field>\n                <Label color=\"teal\" size=\"big\">\n                  Size: <span id=\"icon-size\">{size}px<br /><small>Adjusting size won't update preview, and only affects the downloading of the icon.</small></span>\n                  <Input type=\"range\" name=\"size\" min=\"32\" max={MAX_CANVAS_SIZE} step=\"1\" value={size} onChange={this.handleInputChange} />\n                </Label>\n              </Form.Field>\n              <Form.Field inline className=\"center\">\n                <Button type=\"submit\" size=\"big\" color=\"teal\">Download! <i className=\"fas fa-arrow-down\" /></Button>\n              </Form.Field>\n            </Form>\n          </Segment>\n        </Grid.Column>\n        <Grid.Column\n          textAlign=\"center\"\n        >\n          <div id=\"canvas-wrap\">\n            {fontsLoaded &&\n              <canvas id=\"canvas\" width={0} height={0} ref={this.canvas}></canvas>\n            }\n          </div>\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default IconPreview;\n","import React from \"react\";\n\nimport \"./KoFi.css\";\n\n// Brought in from https://codesandbox.io/s/happy-sun-49mzk\n\nexport default function KoFi(props) {\n  const { color, id, label } = props;\n  return (\n    <div class=\"btn-container\">\n      <a\n        title={label}\n        class=\"kofi-button\"\n        style={{ backgroundColor: color }}\n        href={\"https://ko-fi.com/\" + id}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <span class=\"kofitext\">\n          <img\n            src=\"https://ko-fi.com/img/cup-border.png\"\n            class=\"kofiimg\"\n            alt=\"Ko-Fi button\"\n          />\n          {label}\n        </span>\n      </a>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport './Footer.css';\n\nconst worlds = [\"🌍\", \"🌏\", \"🌎\"];\n\nclass Footer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      worldIndex: 0\n    };\n\n    this.spinTheGlobe = this.spinTheGlobe.bind(this);\n  }\n\n  componentDidMount() {\n    this.spinTheGlobeTimer = setInterval(this.spinTheGlobe, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.spinTheGlobeTimer);\n  }\n\n  spinTheGlobe() {\n    this.setState((prevState) => ({\n      worldIndex: prevState.worldIndex === (worlds.length - 1) ? 0 : prevState.worldIndex + 1\n    }));\n  }\n\n  render() {\n    return (\n      <footer>\n        <p>\n          Made by <a href=\"http://tomer.shvueli.com?ref=cleanicons\" target=\"_blank\" rel=\"noopener noreferrer\">Tomer</a> from all around the <a href=\"http://wherethehellaretomerandmichelle.com?ref=cleanicons\" target=\"_blank\" rel=\"noopener noreferrer\"><span role=\"img\" aria-label=\"World\">{worlds[this.state.worldIndex]}</span></a>\n        </p>\n      </footer>\n    );\n  }\n}\nexport default Footer;","import React, { Component } from 'react';\nimport { Header, Container, Menu, Segment } from 'semantic-ui-react';\nimport './App.css';\n\nimport IconPreview from './IconPreview';\nimport KoFi from './KoFi';\nimport Footer from './Footer';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container\n          id=\"app-header\"\n        >\n          <Menu pointing secondary>\n            <Menu.Item header>\n              <Header\n                id=\"brand\"\n                textAlign=\"left\"\n                as=\"h1\"\n              >\n                CleanIcons.xyz\n              </Header>\n            </Menu.Item>\n            <Menu.Menu position='right'>\n              <Menu.Item\n                name=\"github-link\"\n                id=\"github-link-wrap\"\n              >\n                <a href=\"https://github.com/tomershvueli/cleanicons\">\n                  <i className=\"fab fa-github\"></i>\n                </a>\n              </Menu.Item>\n              <Menu.Item>\n                <KoFi color=\"#00b5ad\" id=\"D1D41JRJE\" label=\"Buy me a Coffee\" />\n              </Menu.Item>\n            </Menu.Menu>\n          </Menu>\n          <IconPreview />\n          <Segment>\n            All 3rd party brands, trademarks, trade-, product- and corporate-names, logos and other properties belong to their respective owners. By using this service, you agree not to violate any licenses and copyright laws.\n          </Segment>\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MatomoProvider, createInstance } from '@datapunt/matomo-tracker-react'\n\n// Only track analytics in production\nif (process.env.NODE_ENV === 'production') {\n  const instance = createInstance({\n    urlBase: \"https://analytics.brillicity.com/\",\n    siteId: 11,\n  });\n\n  ReactDOM.render(\n    <MatomoProvider value={instance}>\n      <App env={process.env.NODE_ENV} />\n    </MatomoProvider>,\n    document.getElementById('root')\n  );\n} else {\n  ReactDOM.render(\n    <App env={process.env.NODE_ENV} />,\n    document.getElementById('root')\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}